<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd">
	<!--
	
	auto-config='true' :  기본 로그인페이지/ HTTP 기본인증 / 로그아웃기능사용을 위한 설정
	use-expressions="true" : <intercept-url>의 access 속성에 표현식을 사용한다는 의미
	                         "false"면 access="USER" 로 값을 바로 사용
			                 "true" 면 access="hasRole('ROLE_USER')" 사용 ROLE_는 생략 가능
	-->
	<security:http auto-config="true" use-expressions="true">
	
		<!--
		<intercept-url> : URL pattern에 대해 접근 권한을 설정.따라서 URL pattern에 따라 여러개 설정 가능
		                  단, 여러개 설정시 위에서 차례로 순서대로 적용됨으로 
		                  가장 특수한 경우를 아래쪽에 놓고 일반적인 경우를 위쪽에 설정한다
		-->
	      <!-- 모든 패턴(/**)에 대해 누구나 접근을  허용(permitAll)하고  /Baby로 시작하는 모든 패턴에 대해서는
		       USER권한을 가진 사람만 접근을 허용하겠다는 의미-->
		  <security:intercept-url pattern="/**" access="permitAll" />		
		  <security:intercept-url pattern="/Baby/**" access="hasRole('USER')" />
		  <security:intercept-url pattern="/baby/**" access="hasRole('USER')" />
		  
		  <!--
		  <security:form-login/>요소로  로그인 설정:	  
					      login-page: 로그인처리 URL의 기본값은 login-page="/login" 
		                              사용자 정의 폼 사용시 login-page="사용자 정의 로그인페이지 URL지정"
						  default-target-url:로그인 한 후에 보여질 페이지 URL지정. 
						  authentication-failure-url: 로그인 실패시 보여질 페이지 URL지정. . 
						                              기본값은 /login?error
						  login-processing-url:로그인 처리 URL지정.로그인 폼의 action속성값.기본값은 /loginProcess
						  username-parameter : 로그인 폼에 아이디 입력 필드에 지정한 name 속성값. 기본값은 "username"
					      password-parameter : 로그인 폼에 비밀번호 입력 필드에 지정한 name 속성값. 기본값은 "password" 
		  -->
		  <security:form-login 
		    		    login-page="/login_page.kosmo"
		                default-target-url="/Notify.kosmo"
		                always-use-default-target="true" 
		                authentication-failure-url="/login_page.kosmo?error"
		                login-processing-url="/Login.kosmo"
		                username-parameter="id"
		                password-parameter="pwd" />
						

		    <!--
			<security:csrf disabled="false"/> : CSRF(Cross Site Resquest Fosery) 공격을 방어하기 위한 설정
		                               CSRF방어 설정시에는  사용자 정의 로그인 폼 사용시에
		                               아래 hidden태그 필수
		                               <input type="hidden" name="${_csrf.parameterName}" value="${_csrf.token}"/>
		                               또한 
		                               로그아웃을 POST 방식으로 해야 한다. 
		                               CSRF 방어를 사용하지 않도록 되어있다면 GET 방식으로도 처리가능하다
										예]
										<form:form action="<c:url value='/logout'/>" method="POST">
											<input type="submit" value="로그아웃" />
										</form:form>
		 -->
		            
		    <security:csrf disabled="false"/><!--false로 설정한 경우 Top.jsp의 로그아웃 요청을 POST방식으로 변경해야 한다-->
		    <!-- 
			<security:session-management/> 중복 로그인 방지를 위한 요소 :
			
				invalid-session-url : 세션이 끊어?을때 이동 할 URL지정(중복으로 인해 끊어진 경우도 해당함).
				max-sessions="1" : 최대 허용 가능 중복 세션 수.(중복 로그인 방지하기 위해 1로 설정)
				expired-url :  중복 로그인이 일어났을 경우 이동 할 URL 지정.
			
			    한 명이 로그인하고 다른 브라우저나 지역에서 동일한 아이디로 로그인 하게 되면 
				먼저 로그인한 사람의 세션이 끊기게 된다. 
				만약 첫 번째 로그인한 세션을 유지하고 두 번째 중복 로그인한 세션을 막으려면 
				error-if-maximum-exceeded="true"를 <security:concurrency-control /> 에 설정하면 된다
				
			
			-->
		    <security:session-management invalid-session-url="/index.kosmo" >
           	<security:concurrency-control max-sessions="1" expired-url="/login_page.kosmo" />
    		</security:session-management>
	 </security:http>
	 <security:authentication-manager>
			<!--
			<security:jdbc-user-service  :데이타 베이스를 사용할때
				data-source-ref : 데이터베이스 연결을 나타내는 dataSource.
			    role-prefix : "ROLE_" 와 같은 롤 앞에 붙는 prefix 를 지정. 
				              권한 체크시 여기에 지정된 값을 붙여서 확인. 
							  데이터베이스에 ROLE_USER 형식으로 데이터를 넣은 경우 여기서는 값을 지정하지 않은다
				users-by-sername-query : 아이디로 사용자 정보를 가져오는 쿼리 설정
				authorities-by-username-query : 아이디로  권한정보를 가져오는 쿼리 설정.
			-->
	 		<security:authentication-provider>
	 			<security:jdbc-user-service 
			        data-source-ref="datasource"
			        role-prefix=""
			        users-by-username-query="select id as username, pwd as password, enabled from members where id = ?"
			        authorities-by-username-query="select id as username, authority AS authority from members where id = ?" />
	 		</security:authentication-provider>
		</security:authentication-manager>	
		

</beans>
